Objectives:

Look at memory allocation behavior of lists and dicts
Make a custom container

Python lists are highly optimized for performing append() operations. 
Each time a list grows, it grabs a larger chunk of memory than it actually needs with the expectation 
that more data will be added to the list later. 
If new items are added and space is available, the append() operation 
stores the item without allocating more memory.

Experiment with this feature of lists by using the sys.getsizeof() 
function on a list and appending a few more items.

>>> import sys
>>> items = []
>>> sys.getsizeof(items)
64
>>> items.append(1)
>>> sys.getsizeof(items)
96
>>> items.append(2)
>>> sys.getsizeof(items)    # Notice how the size does not increase
96
>>> items.append(3)
>>> sys.getsizeof(items)    # It still doesn't increase here
96
>>> items.append(4)
>>> sys.getsizeof(items)    # Not yet.
96
>>> items.append(5)
>>> sys.getsizeof(items)    # Notice the size has jumped
128
>>>

>>> import sys
>>> items = []
>>> sys.getsizeof(items)
56
>>> sys.getsizeof(items)
56
>>> 
>>> items.append(1)
>>> sys.getsizeof(items)
88
>>> items.append(2)
>>> sys.getsizeof(items)
88
>>> 
>>> items.append(3)
>>> sys.getsizeof(items)
88
>>> items.append(4)
>>> sys.getsizeof(items)
88
>>> items.append(5)
>>> sys.getsizeof(items)
120
>>> items.append(6)
>>> sys.getsizeof(items)
120
>>> items.append(7)
>>> sys.getsizeof(items)
120
>>> items.append(8)
>>> sys.getsizeof(items)
120
>>> items.append(9)
>>> sys.getsizeof(items)
184

A list stores its items by reference. So, the memory required for each item is a single memory address.
On a 64-bit machine, an address is typically 8 bytes. However, if Python has been compiled for 32-bits, 
it might be 4 bytes and the numbers for the above example will be half of what's shown.

(b) Dictionary/Class Growth
Python dictionaries (and classes) allow up to 5 values to be stored before their reserved memory doubles.
Investigate by making a dictionary and adding a few more values to it:

>>> row = { 'route': '22', 'date': '01/01/2001', 'daytype': 'U', 'rides': 7354 }
>>> sys.getsizeof(row)
>>> sys.getsizeof(row)
240
>>> row['a'] = 1
>>> sys.getsizeof(row)
240
>>> row['b'] = 2
>>> sys.getsizeof(row)
368
>>>

>>> row = { 'route': '22', 'date': '01/01/2001', 'daytype': 'U', 'rides': 7354 }
>>> 
>>> sys.getsizeof(row)
184
>>> row['a'] = 1
>>> sys.getsizeof(row)
184
>>> row['b'] = 2
>>> sys.getsizeof(row)
272
>>> row['c'] = 3
>>> 
>>> sys.getsizeof(row)
272
>>> row['d'] = 4
>>> 
>>> sys.getsizeof(row)
272
>>> row['e'] = 5
>>> 
>>> sys.getsizeof(row)
272
>>> row['f'] = 6
>>> 
>>> sys.getsizeof(row)
272
>>> row['g'] = 7
>>> 
>>> sys.getsizeof(row)
464


Does the memory go down if you delete the item you just added?

Food for thought: If you are creating large numbers of records, 
representing each record as a dictionary might not be the most efficient approach--
you could be paying a heavy price for the convenience of having a dictionary. 
It might be better to consider the use of tuples, named tuples, or classes that define __slots__.